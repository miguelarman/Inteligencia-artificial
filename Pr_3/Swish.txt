igual(X,X).

% Ejercicio 2
concatena([],L,L).
concatena([X|L],L1,[X|L2]) :- concatena(L,L1,L2).

invierte([],[]) :- !.
invierte([F|R],L) :- concatena(I, [F], L), invierte(R, I).

% Ejercicio 3
palindromo(X) :- invierte(Y, X), igual(X,Y).

% Ejercicio 4
divide(L,0,L1,L2) :- igual(L1,[]), igual(L,L2).
divide([A|L],N,[B|L1],L2) :- igual(A,B),N>0,succ(New, N),divide(L,New,L1,L2).

% Ejercicio 5
aplasta([], []) :- !.
aplasta([X], [X]) :- not(is_list(X)), !.
aplasta([X], Y) :- is_list(X), aplasta(X,Y), !.
aplasta([X|L], R) :- aplasta([X], LX), aplasta(L, LL), concatena(LX, LL, R).

% Ejercicio 6
primos(2, [2]) :- !.
primos(1, []) :- !.
% primos(N, [D|L]) :- prime_factor(D,N), concatena([D], U, L), primos(N/D, U).

divide(N, D) :- 0 is mod(N, D), N>0, D>0.

es_primo(N, 1) :- N>0, !.
es_primo(N, Num) :-
    N>0, Num>0, not(divide(N, Num)), New is Num-1, es_primo(N, New).
primo(N) :- N>0, es_primo(N, N-1).

next_factor(N,F,NF) :- primo(F), divide(F, N), next_factor(N/F, F, NF).



















% Sacado de internet. No usar

prime_factor(N, D) :-
    find_prime_factor(N, 2, D).

find_prime_factor(N, D, D) :-
    0 is N mod D.
find_prime_factor(N, D, R) :-
    D < N,
    (0 is N mod D
    -> (N1 is N/D, find_prime_factor(N1, D, R))
    ;  (D1 is D + 1, find_prime_factor(N, D1, R))
    ).